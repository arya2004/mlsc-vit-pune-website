@import url('https://fonts.googleapis.com/css2?family=Almendra+Display&family=Atomic+Age&family=Changa&family=Exo&family=Genos:wght@500&family=Kaushan+Script&family=Medula+One&family=Trade+Winds&display=swap');

// .container {
    
//   // font-family: 'Almendra Display', serif;
//   // font-family: 'Atomic Age', system-ui;
//   // font-family: 'Changa', sans-serif;
//   // font-family: 'Exo', sans-serif;
//   // font-family: 'Genos', sans-serif;
//   // font-family: 'Kaushan Script', cursive;
//   // font-family: 'Medula One', system-ui;
//   // font-family: 'Trade Winds', system-ui;
    
//   }
  
  /* .glitch {
    
    font-weight: bold;
    text-transform: uppercase;
    position: relative;
    text-shadow: 0.05em 0 0 #4cb9b7ae, -0.03em -0.04em 0 #ae53afa0, 0.025em 0.04em 0 #abaa4dba;
    animation: glitch 500ms infinite;
  }
  
  .glitch span {
    position: absolute;
    top: 0;
    left: 0;
  }
  
  .glitch span:first-child {
    animation: glitch 500ms infinite;
    clip-path: polygon(0 0, 100% 0, 100% 35%, 0 35%);
    transform: translate(-0.04em, -0.03em);
    opacity: 0.75;
  }
  
  .glitch span:last-child {
    animation: glitch 375ms infinite;
    clip-path: polygon(0 65%, 100% 65%, 100% 100%, 0 100%);
    transform: translate(0.04em, 0.03em);
    opacity: 0.75;
  }
  
  @keyframes glitch {
    0% {
      text-shadow: 0.05em 0 0 #4cb9b7ae, -0.03em -0.04em 0 #ae53afa0,
        0.025em 0.04em 0 #abaa4dba;
    }
    15% {
      text-shadow: 0.05em 0 0 #4cb9b7ae, -0.03em -0.04em 0 #ae53afa0,
        0.025em 0.04em 0 #abaa4dba;
    }
    16% {
      text-shadow: -0.05em -0.025em 0 #4cb9b7ae, 0.025em 0.035em 0 #ae53afa0,
        -0.05em -0.05em 0 #abaa4dba;
    }
    49% {
      text-shadow: -0.05em -0.025em 0 #4cb9b7ae, 0.025em 0.035em 0 #ae53afa0,
        -0.05em -0.05em 0 #abaa4dba;
    }
    50% {
      text-shadow: 0.05em 0.035em 0 #4cb9b7ae, 0.03em 0 0 #ae53afa0,
        0 -0.04em 0 #abaa4dba;
    }
    99% {
      text-shadow: 0.05em 0.035em 0 #4cb9b7ae, 0.03em 0 0 #ae53afa0,
        0 -0.04em 0 #abaa4dba;
    }
    100% {
      text-shadow: -0.05em 0 0 #4cb9b7ae, -0.025em -0.04em 0 #ae53afa0,
        -0.04em -0.025em 0 #abaa4dba;
    }
  } */

  // .glitch {
  //   position: relative;
  //   color: #fff;
  //   font-size: 1.5rem;
  // }
  
  // .line:not(:first-child) {
  //   position: absolute;
  //   top: 0;
  //   left: 0;
  // }
  
  // @keyframes clip {
  //   0% {
  //     clip-path: polygon(0 100%, 100% 100%, 100% 120%, 0 120%);
  //   }
  
  //   100% {
  //     clip-path: polygon(0 -20%, 100% -20%, 100% 0%, 0 0);
  //   }
  // }
  
  // .glitch .line:nth-child(1) {
  //   animation: clip 3000ms 0 * -300ms linear infinite, glitch1 500ms random(1000) * -1ms linear infinite;
  // }
  
  // .glitch .line:nth-child(2) {
  //   animation: clip 3000ms 1 * -300ms linear infinite, glitch2 500ms random(1000) * -1ms linear infinite;
  // }
  
  // /* Repeat for lines 3 through 10 with appropriate adjustments */
  
  // @keyframes glitch1 {
  //   0% {
  //     transform: translateX(0);
  //   }
  //   80% {
  //     transform: translateX(0);
  //     color: #fff;
  //   }
  //   85% {
  //     transform: translateX(random(10) - 5px);
  //     color: #4E9A26;
  //   }
  //   90% {
  //     transform: translateX(random(10) - 5px);
  //     color: #AC1212;
  //   }
  //   95% {
  //     transform: translateX(random(10) - 5px);
  //     color: #fff;
  //   }
  //   100% {
  //     transform: translateX(0);
  //   }
  // }

.stable-shadows {
  text-shadow: -1px 0 #009dff, 1px 1px #b561b5;
}

  
  /* Repeat for glitch2 through glitch10 with appropriate adjustments */
 @mixin glitchCopy { 
		content: attr(data-text);
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
}

.glitch {
	position: relative;
	letter-spacing: 0em;
	/* Animation provies a slight random skew. Check bottom of doc
	for more information on how to random skew. */
	animation: glitch-skew 1s infinite linear alternate-reverse;
	
	// Creates a copy before our text. 
	&::before{
		// Duplicates our text with the mixin.
		@include glitchCopy;
		// Scoots text slightly to the left for the color offset.
		left: 2px;
		// Creates the color 'shadow' that happens on the glitch.
		text-shadow: -2px 0 #b561b5;
		/* Creates an initial clip for our glitch. This works in
		a typical top,right,bottom,left fashion and creates a mask
		to only show a certain part of the glitch at a time. */
		clip: rect(44px, 450px, 56px, 0);
		/* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
		with an alternating animation to keep things fresh. */
		animation: glitch-anim 5s infinite linear alternate-reverse;
	}
	
	// Creates a copy after our text. Note comments from ::before.
	&::after {
		@include glitchCopy;
		left: -2px;
		text-shadow: -2px 0 #00fff9, 2px 2px #b561b5;
		animation: glitch-anim2 1s infinite linear alternate-reverse;
	}
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
			transform: skew((random(100) / 100) + deg);
    }
  }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
			transform: skew((random(100) / 100) + deg);
    }
  }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
  $steps: 10;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      transform: skew((random(10) - 5) + deg);
    }
  }
}
  
  